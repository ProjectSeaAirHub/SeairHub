# src/main/resources/application.properties

# 포트번호 설정
server.port=8080

# [✅ 추가] ngrok과 같은 리버스 프록시 환경에서 WebSocket이 정상 동작하도록 하는 핵심 설정
server.forward-headers-strategy=native

# DB (MySQL) 연동 설정
spring.datasource.url=jdbc:mysql://localhost:3306/dima5?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root

# JPA 및 SQL 로그 설정
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none

# Thymeleaf 캐시 비활성화 (개발 중 즉시 변경 확인용)
spring.thymeleaf.cache=false

# ======== 파일 업로드 설정 ========
# 1) 업로드 파일의 용량 제한
spring.servlet.multipart.max-file-size = 100MB
spring.servlet.multipart.max-request-size = 100MB

# 2) [수정] 서버에 파일이 저장될 실제 경로 (코드에서 이 값을 참조)

file.upload-dir=C:/uploadPath/

# ======== OAuth2 Kakao 소셜 로그인 설정 ========
spring.security.oauth2.client.registration.kakao.client-id=3225ba0adc4bdc19e876da43cb160cc7
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.client-name=Kakao

# OAuth2 Kakao Provider Configuration
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize?prompt=login
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id


# 정적 리소스 경로 설정
spring.web.resources.static-locations=classpath:/static/
spring.mvc.static-path-pattern=/**
spring.web.resources.add-mappings=true


# ======== OAuth2 Naver 소셜 로그인 설정 ========
# 1단계에서 발급받은 값을 여기에 입력하세요.
spring.security.oauth2.client.registration.naver.client-id=kxZ0X0vIjJxOygrRJ49Q
spring.security.oauth2.client.registration.naver.client-secret=TsPb4_8WEa
# 네이버에 요청할 권한 범위
spring.security.oauth2.client.registration.naver.scope=name,email
# 애플리케이션 이름 (내부적으로 사용)
spring.security.oauth2.client.registration.naver.client-name=Naver
# 인증 방식
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
# 1단계에서 등록한 콜백 URL
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver

# Naver Provider 정보 (네이버는 표준 규격을 완전히 따르지 않아, 각 URL을 직접 명시해야 합니다)
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
# 네이버 응답에서 사용자 정보를 담고 있는 최상위 속성 이름
spring.security.oauth2.client.provider.naver.user-name-attribute=response


# ======== HikariCP (Database Connection Pool) 설정 추가 ========
# 동시에 유지할 수 있는 최대 DB 커넥션 개수 (기본값 10 -> 50으로 늘림)
spring.datasource.hikari.maximum-pool-size=50

# 커넥션을 얻기 위해 대기하는 최대 시간 (기본값 30초 -> 60초로 늘림)
spring.datasource.hikari.connection-timeout=60000


# 쿼리 실행 시간과 같은 더 상세한 통계 정보를 보여주는 라이브러리 설정
logging.level.org.hibernate.stat=DEBUG
spring.jpa.properties.hibernate.generate_statistics=true

# ===============================================================
# [✅ 추가] DB 커넥션 풀(HikariCP) 안정성 및 성능 최적화 설정
# ===============================================================

# 최소한으로 유지할 유휴 커넥션 개수입니다. 
# 트래픽이 없을 때도 최소 이만큼의 커넥션을 유지하여, 갑작스러운 요청에 빠르게 응답할 수 있습니다.
spring.datasource.hikari.minimum-idle=10

# 커넥션이 풀에서 유휴 상태로 유지될 수 있는 최대 시간입니다. (기본값 10분)
# 이 시간을 넘긴 유휴 커넥션은 풀에서 제거되어 불필요한 DB 리소스 낭비를 막습니다.
spring.datasource.hikari.idle-timeout=600000

# 커넥션의 최대 수명입니다. (기본값 30분)
# 네트워크 문제 등으로 커넥션이 비정상적으로 끊어지는 것을 방지하기 위해, 주기적으로 커넥션을 재생성합니다.
# ngrok과 같은 터널링 환경에서 특히 유용합니다.
spring.datasource.hikari.max-lifetime=1800000

# 커넥션 풀에서 커넥션이 살아있는지 확인하는 시간 (기본값 없음 -> 10분마다 확인)
spring.datasource.hikari.keepalive-time=600000

# 풀에 커넥션이 없을 때, 새 커넥션을 가져오기까지 대기하는 시간 (기본값 1분 -> 30초)
spring.datasource.hikari.validation-timeout=30000